<Program>-><Instruction>
<Empty>->END_OF_INSTRUCTION
<Definition>-><Type> TYPE_DEFINITION IDENTIFIER <Expression>
            ->CONST <Type> TYPE_DEFINITION IDENTIFIER <Expression>
<Type>->BOOLEAN_TYPE
      ->REAL_TYPE
      ->INTEGER_TYPE
<Block>->LET <Assignation> <Empty> <Instruction> END
<Instruction>-><Assignation> <Empty> <Instruction>
             -><Loop> <Empty> <Instruction>
             -><Definition> <Empty> <Instruction>
             -><Block> <Empty> <Instruction>
             -><Empty> <Instruction>
             ->EPSILON_VALUE
<Loop>-><If>
      ->WHILE <Expression> <Empty> <Instruction> END
      ->FOR IDENTIFIER ASSIGNATION <Expression> TERNARY_ELSE <Expression> <ForTail>
<ForTail>-><Empty> <Instruction> END
         ->TERNARY_ELSE <Expression> <Empty> <Instruction> END
<Assignation>->IDENTIFIER <AssignationTail>
<AssignationTail>->ASSIGNATION <Expression>
                 ->COMMA <Assignation> COMMA <Expression>
<Expression>-><BinaryExpression> <TernaryIfExpression>
<TernaryIfExpression>->TERNARY_IF <Expression> <TernaryElseExpression>
             ->EPSILON_VALUE
<TernaryElseExpression>->TERNARY_ELSE <Expression>
<AtomicExpression>->IDENTIFIER
                  ->INTEGER
                  ->REAL
                  ->BOOLEAN
<UnaryExpression>->NEGATION <UnaryExpression>
                 -><UnaryBitwiseNotExpression>
<UnaryBitwiseNotExpression>->BITWISE_NOT <UnaryBitwiseNotExpression>
                           -><UnaryMinusPlusExpression>
<UnaryMinusPlusExpression>->MINUS <UnaryMinusPlusExpression>
                          ->PLUS <UnaryMinusPlusExpression>
                          -><UnaryAtomicExpression>
<UnaryAtomicExpression>-><AtomicExpression>
                       ->LEFT_PARENTHESIS <Expression> RIGHT_PARENTHESIS                       
<BinaryExpression>-><BinaryLazyOrExpression> <BinaryExpression'>
<BinaryExpression'>->LAZY_OR <BinaryLazyOrExpression> <BinaryExpression'>
                   ->EPSILON_VALUE
<BinaryLazyOrExpression>-><BinaryLazyAndExpression> <BinaryLazyOrExpression'>
<BinaryLazyOrExpression'>->LAZY_AND <BinaryLazyAndExpression> <BinaryLazyOrExpression'>
                         ->EPSILON_VALUE
<BinaryLazyAndExpression>-><BinaryNumericExpression> <BinaryLazyAndExpression'>
<BinaryLazyAndExpression'>->GREATER_THAN <BinaryNumericExpression> <BinaryLazyAndExpression'>
                          ->LESS_THAN <BinaryNumericExpression> <BinaryLazyAndExpression'>
                          ->GREATER_OR_EQUALS_THAN <BinaryNumericExpression> <BinaryLazyAndExpression'>
                          ->LESS_OR_EQUALS_THAN <BinaryNumericExpression> <BinaryLazyAndExpression'>
                          ->EQUALITY <BinaryNumericExpression> <BinaryLazyAndExpression'>
                          ->INEQUALITY <BinaryNumericExpression> <BinaryLazyAndExpression'>
                          ->EPSILON_VALUE
<BinaryNumericExpression>-><BinaryTermExpression> <BinaryNumericExpression'>
<BinaryNumericExpression'>->PLUS <BinaryTermExpression> <BinaryNumericExpression'>
                          ->MINUS <BinaryTermExpression> <BinaryNumericExpression'>
                          ->BITWISE_OR <BinaryTermExpression> <BinaryNumericExpression'>
                          ->BITWISE_XOR <BinaryTermExpression> <BinaryNumericExpression'>
                          ->EPSILON_VALUE
<BinaryTermExpression>-><BinaryShiftedExpression> <BinaryTermExpression'>
<BinaryTermExpression'>->ARITHMETIC_SHIFT_LEFT <BinaryShiftedExpression> <BinaryTermExpression'>
                       ->ARITHMETIC_SHIFT_RIGHT <BinaryShiftedExpression> <BinaryTermExpression'>
                       ->EPSILON_VALUE
<BinaryShiftedExpression>-><BinaryFactorExpression> <BinaryShiftedExpression'>
<BinaryShiftedExpression'>->TIMES <BinaryFactorExpression> <BinaryShiftedExpression'>
                          ->DIVIDE <BinaryFactorExpression> <BinaryShiftedExpression'>
                          ->REMAINDER <BinaryFactorExpression> <BinaryShiftedExpression'>
                          ->BITWISE_AND <BinaryFactorExpression> <BinaryShiftedExpression'>
                          ->INVERSE_DIVIDE <BinaryFactorExpression> <BinaryShiftedExpression'>
                          ->EPSILON_VALUE
<BinaryFactorExpression>-><UnaryExpression> <BinaryFactorExpression'>
<BinaryFactorExpression'>->POWER <UnaryExpression> <BinaryFactorExpression'>
                         ->EPSILON_VALUE
<If>->IF <Expression> <Empty> <Instruction> <IfEnd>
<IfEnd>->ELSE_IF <Expression> <Empty> <Instruction> <IfEnd>
       ->ELSE <Instruction> END
       ->END
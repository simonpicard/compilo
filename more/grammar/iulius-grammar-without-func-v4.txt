<Program>-><Instruction> <InstructionEnd> <InstructionList> <Program>
         -><Empty> <Program>
         ->EPSILON_VALUE
<Empty>-><InstructionEnd> <EmptyTail>
<EmptyTail>-><InstructionEnd> <EmptyTail>
           ->EPSILON_VALUE
<Definition>->IDENTIFIER TYPE_DEFINITION <Expression>
            ->CONST <Assignation>
<Block>->LET <Assignation> <Empty> <InstructionList> END
<InstructionList>-><Instruction> <Empty> <InstructionList>
                 -><Empty> <InstructionList>
                 ->EPSILON_VALUE
<Instruction>-><Assignation>
             -><Loop>
             -><Definition>
             -><Block>
<InstructionEnd>->END_OF_INSTRUCTION
<Type>->BOOLEAN_TYPE
      ->REAL_TYPE
      ->INTEGER_TYPE
<Loop>-><If>
      ->WHILE <Expression> <Empty> <InstructionList> END
      ->WHILE <Expression> <Empty> <Instruction> END
      ->FOR IDENTIFIER ASSIGNATION <Expression> TERNARY_ELSE <Expression> <Empty> <InstructionList> END
      ->FOR IDENTIFIER ASSIGNATION <Expression> TERNARY_ELSE <Expression> <Empty> <Instruction> END
      ->FOR IDENTIFIER ASSIGNATION <Expression> TERNARY_ELSE <Expression> TERNARY_ELSE <Expression> <Empty> <InstructionList> END
      ->FOR IDENTIFIER ASSIGNATION <Expression> TERNARY_ELSE <Expression> TERNARY_ELSE <Expression> <Empty> <Instruction> END
<Assignation>->IDENTIFIER ASSIGNATION <Expression>
             ->IDENTIFIER COMMA <Assignation> COMMA <Expression>
<Expression>-><Expression> TERNARY_IF <Expression> TERNARY_ELSE <Expression>
            -><BinaryExpression>
<AtomicExpression>->IDENTIFIER
                  ->INTEGER
                  ->REAL
                  ->BOOLEAN
<UnaryExpression>->NEGATION <UnaryExpression>
                 -><UnaryBitwiseNotExpression>
<UnaryBitwiseNotExpression>->BITWISE_NOT <UnaryBitwiseNotExpression>
                           -><UnaryMinusPlusExpression>
<UnaryMinusPlusExpression>->MINUS <UnaryMinusPlusExpression>
                          ->PLUS <UnaryMinusPlusExpression>
                          -><UnaryAtomicExpression>
<UnaryAtomicExpression>-><AtomicExpression>
                       ->LEFT_PARENTHESIS <Expression> RIGHT_PARENTHESIS                       
<BinaryExpression>-><BinaryExpression> LAZY_OR <BinaryLazyOrExpression>
                  -><BinaryLazyOrExpression>
<BinaryLazyOrExpression>-><BinaryLazyOrExpression> LAZY_AND <BinaryLazyAndExpression>
                        -><BinaryLazyAndExpression>
<BinaryLazyAndExpression>-><BinaryLazyAndExpression> GREATER_THAN <BinaryNumericExpression>
                         -><BinaryLazyAndExpression> LESS_THAN <BinaryNumericExpression>
                         -><BinaryLazyAndExpression> GREATER_OR_EQUALS_THAN <BinaryNumericExpression>
                         -><BinaryLazyAndExpression> LESS_OR_EQUALS_THAN <BinaryNumericExpression>
                         -><BinaryLazyAndExpression> EQUALITY <BinaryNumericExpression>
                         -><BinaryLazyAndExpression> INEQUALITY <BinaryNumericExpression>
                         -><BinaryNumericExpression>
<BinaryNumericExpression>-><BinaryNumericExpression> PLUS <BinaryTermExpression>
                         -><BinaryNumericExpression> MINUS <BinaryTermExpression>
                         -><BinaryNumericExpression> BITWISE_OR <BinaryTermExpression>
                         -><BinaryNumericExpression> BITWISE_XOR <BinaryTermExpression>
                         -><BinaryTermExpression>
<BinaryTermExpression>-><BinaryTermExpression> ARITHMETIC_SHIFT_LEFT <BinaryShiftedExpression>
                      -><BinaryTermExpression> ARITHMETIC_SHIFT_RIGHT <BinaryShiftedExpression>
                      -><BinaryShiftedExpression>
<BinaryShiftedExpression>-><BinaryShiftedExpression> TIMES <BinaryFactorExpression>
                         -><BinaryShiftedExpression> DIVIDE <BinaryFactorExpression>
                         -><BinaryShiftedExpression> REMAINDER <BinaryFactorExpression>
                         -><BinaryShiftedExpression> BITWISE_AND <BinaryFactorExpression>
                         -><BinaryShiftedExpression> INVERSE_DIVIDE <BinaryFactorExpression>
                         -><BinaryFactorExpression>
<BinaryFactorExpression>-><BinaryFactorExpression> POWER <UnaryExpression>
                        -><UnaryExpression>     
<If>->IF <Expression> <Empty> <InstructionList> <IfEnd>
    ->IF <Expression> <Empty> <Instruction> <IfEnd>
<IfEnd>->ELSE_IF <Expression> <Empty> <InstructionList> <IfEnd>
       ->ELSE_IF <Expression> <Empty> <Instruction> <IfEnd>
       ->ELSE <InstructionList> END
       ->ELSE <Instruction> END
       ->END
#Ajout de epsilon pour les variables non productives
<Program> <Empty> <EmptyTail> <Definition> <Block> <InstructionList> <Instruction> <InstructionEnd> <Loop> <Assignation> <Expression> <AtomicExpression> <UnaryExpression> <UnaryBitwiseNotExpression> <UnaryMinusPlusExpression> <UnaryAtomicExpression> <BinaryExpression> <BinaryLazyOrExpression>  <BinaryLazyAndExpression> <BinaryNumericExpression> <BinaryTermExpression> <BinaryShiftedExpression> <BinaryFactorExpression> <If> <IfEnd> <Expression'> <BinaryExpression'> <BinaryLazyOrExpression'> <BinaryLazyAndExpression'> <BinaryNumericExpression'> <BinaryTermExpression'> <BinaryShiftedExpression'> <BinaryFactorExpression'> <WhileTail> <ForTail> <ForTailEnd> <AssignationTail> <IfTail> <IfEndTail>
EPSILON_VALUE IDENTIFIER TYPE_DEFINITION CONST END ASSIGNATION MAP_TO END_OF_INSTRUCTION BOOLEAN_TYPE REAL_TYPE INTEGER_TYPE WHILE FOR TERNARY_ELSE COMMA TERNARY_IF INTEGER REAL BOOLEAN NEGATION BITWISE_NOT MINUS PLUS LEFT_PARENTHESIS RIGHT_PARENTHESIS LAZY_OR LAZY_AND GREATER_THAN LESS_THAN GREATER_OR_EQUALS_THAN LESS_OR_EQUALS_THAN EQUALITY INEQUALITY BITWISE_OR BITWISE_XOR ARITHMETIC_SHIFT_LEFT ARITHMETIC_SHIFT_RIGHT TIMES DIVIDE REMAINDER BITWISE_AND INVERSE_DIVIDE POWER IF ELSE_IF ELSE LET
<Program>
<Program>-><Instruction> <InstructionEnd> <InstructionList> <Program>|<Empty> <Program>|EPSILON_VALUE
<Empty>-><InstructionEnd> <EmptyTail>
<EmptyTail>-><InstructionEnd> <EmptyTail>|EPSILON_VALUE
<Definition>->IDENTIFIER TYPE_DEFINITION <Expression>|CONST <Assignation>
<Block>->LET <Assignation> <Empty> <InstructionList> END
<InstructionList>-><Instruction> <Empty> <InstructionList>|<Empty> <InstructionList>|EPSILON_VALUE
<Instruction>-><Assignation>|<Loop>|<Definition>|<Block>
<InstructionEnd>->END_OF_INSTRUCTION
<Loop>-><If>|WHILE <Expression> <Empty> <WhileTail>|FOR IDENTIFIER ASSIGNATION <Expression> TERNARY_ELSE <Expression> <ForTail>
<WhileTail>-><InstructionList> END|<Instruction> END
<ForTail>-><Empty> <ForTailEnd>|TERNARY_ELSE <Expression> <Empty> <ForTailEnd>
<ForTailEnd>-><InstructionList> END|<Instruction> END
<Assignation>->IDENTIFIER <AssignationTail>
<AssignationTail>->ASSIGNATION <Expression>|COMMA <Assignation> COMMA <Expression>
<Expression>-><BinaryExpression> <Expression'>
<Expression'>->TERNARY_IF <Expression> TERNARY_ELSE <Expression> <Expression'>|EPSILON_VALUE
<AtomicExpression>->IDENTIFIER|INTEGER|REAL|BOOLEAN
<UnaryExpression>->NEGATION <UnaryExpression>|<UnaryBitwiseNotExpression>
<UnaryBitwiseNotExpression>->BITWISE_NOT <UnaryBitwiseNotExpression>|<UnaryMinusPlusExpression>
<UnaryMinusPlusExpression>->MINUS <UnaryMinusPlusExpression>|PLUS <UnaryMinusPlusExpression>|<UnaryAtomicExpression>
<UnaryAtomicExpression>-><AtomicExpression>|LEFT_PARENTHESIS <Expression> RIGHT_PARENTHESIS
<BinaryExpression>-><BinaryLazyOrExpression> <BinaryExpression'>
<BinaryExpression'>->LAZY_OR <BinaryLazyOrExpression> <BinaryExpression'>|EPSILON_VALUE
<BinaryLazyOrExpression>-><BinaryLazyAndExpression> <BinaryLazyOrExpression'>
<BinaryLazyOrExpression'>->LAZY_AND <BinaryLazyAndExpression> <BinaryLazyOrExpression'>|EPSILON_VALUE
<BinaryLazyAndExpression>-><BinaryNumericExpression> <BinaryLazyAndExpression'>
<BinaryLazyAndExpression'>->GREATER_THAN <BinaryNumericExpression> <BinaryLazyAndExpression'>|LESS_THAN <BinaryNumericExpression> <BinaryLazyAndExpression'>|GREATER_OR_EQUALS_THAN <BinaryNumericExpression> <BinaryLazyAndExpression'>|LESS_OR_EQUALS_THAN <BinaryNumericExpression> <BinaryLazyAndExpression'>|EQUALITY <BinaryNumericExpression> <BinaryLazyAndExpression'>|INEQUALITY <BinaryNumericExpression> <BinaryLazyAndExpression'>|EPSILON_VALUE
<BinaryNumericExpression>-><BinaryTermExpression> <BinaryNumericExpression'>
<BinaryNumericExpression'>->PLUS <BinaryTermExpression> <BinaryNumericExpression'>|MINUS <BinaryTermExpression> <BinaryNumericExpression'>|BITWISE_OR <BinaryTermExpression> <BinaryNumericExpression'>|BITWISE_XOR <BinaryTermExpression> <BinaryNumericExpression'>|EPSILON_VALUE
<BinaryTermExpression>-><BinaryShiftedExpression> <BinaryTermExpression'>
<BinaryTermExpression'>->ARITHMETIC_SHIFT_LEFT <BinaryShiftedExpression> <BinaryTermExpression'>|ARITHMETIC_SHIFT_RIGHT <BinaryShiftedExpression> <BinaryTermExpression'>|EPSILON_VALUE
<BinaryShiftedExpression>-><BinaryFactorExpression> <BinaryShiftedExpression'>
<BinaryShiftedExpression'>->TIMES <BinaryFactorExpression> <BinaryShiftedExpression'>|DIVIDE <BinaryFactorExpression> <BinaryShiftedExpression'>|REMAINDER <BinaryFactorExpression> <BinaryShiftedExpression'>|BITWISE_AND <BinaryFactorExpression> <BinaryShiftedExpression'> INVERSE_DIVIDE <BinaryFactorExpression> <BinaryShiftedExpression'>|EPSILON_VALUE
<BinaryFactorExpression>-><UnaryExpression> <BinaryFactorExpression'>
<BinaryFactorExpression'>->POWER <UnaryExpression> <BinaryFactorExpression'>|EPSILON_VALUE
<If>->IF <Expression> <Empty> <IfTail>
<IfTail>-><InstructionList> <IfEnd>|<Instruction> <IfEnd>
<IfEnd>->ELSE_IF <Expression> <Empty> <IfEndTail> <IfEnd>|ELSE <IfEndTail> END|END
<IfEndTail>-><InstructionList>|<Instruction>
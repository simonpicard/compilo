/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package core;

import utils.datastructure.ActionTable;
import utils.datastructure.Epsilon;
import utils.datastructure.Terminal;
import utils.datastructure.Variable;
import utils.datastructure.ProductionRule;

/**
 * Initialize the action table for parsing from a harcoded grammar.
 * @author arnaud
 */
public class InitActionTable {

    // Hardcoded variables
    private static final Variable Program = new Variable("<Program>"),
            Instruction = new Variable("<Instruction>"),
            InstructionList = new Variable("<InstructionList>"),
            InstructionListTail = new Variable("<InstructionListTail>"),
            IdentifierInstruction = new Variable("<IdentifierInstruction>"),
            IdentifierInstructionTail = new Variable("<IdentifierInstructionTail>"),
            AssignationTail = new Variable("<AssignationTail>"),
            ConstDefinition = new Variable("<ConstDefinition>"),
            Block = new Variable("<Block>"),
            Loop = new Variable("<Loop>"),
            ForTail = new Variable("<ForTail>"),
            Type = new Variable("<Type>"),
            Expression = new Variable("<Expression>"),
            TernaryIfExpression = new Variable("<TernaryIfExpression>"),
            TernaryElseExpression = new Variable("<TernaryElseExpression>"),
            AtomicExpression = new Variable("<AtomicExpression>"),
            AtomicIdentifierExpression = new Variable("<AtomicIdentifierExpression>"),
            AtomicIdentifierExpressionTail = new Variable("<AtomicIdentifierExpressionTail>"),
            UnaryExpression = new Variable("<UnaryExpression>"),
            UnaryBitwiseNotExpression = new Variable("<UnaryBitwiseNotExpression>"),
            UnaryMinusPlusExpression = new Variable("<UnaryMinusPlusExpression>"),
            UnaryAtomicExpression = new Variable("<UnaryAtomicExpression>"),
            BinaryExpression = new Variable("<BinaryExpression>"),
            BinaryExpressionPrim = new Variable("<BinaryExpression'>"),
            BinaryLazyOrExpression = new Variable("<BinaryLazyOrExpression>"),
            BinaryLazyOrExpressionPrim = new Variable("<BinaryLazyOrExpression'>"),
            BinaryLazyAndExpression = new Variable("<BinaryLazyAndExpression>"),
            BinaryLazyAndExpressionPrim = new Variable("<BinaryLazyAndExpression'>"),
            BinaryNumericExpression = new Variable("<BinaryNumericExpression>"),
            BinaryNumericExpressionPrim = new Variable("<BinaryNumericExpression'>"),
            BinaryTermExpression = new Variable("<BinaryTermExpression>"),
            BinaryTermExpressionPrim = new Variable("<BinaryTermExpression'>"),
            BinaryShiftedExpression = new Variable("<BinaryShiftedExpression>"),
            BinaryShiftedExpressionPrim = new Variable("<BinaryShiftedExpression'>"),
            BinaryFactorExpression = new Variable("<BinaryFactorExpression>"),
            BinaryFactorExpressionPrim = new Variable("<BinaryFactorExpression'>"),
            If = new Variable("<If>"),
            IfEnd = new Variable("<IfEnd>"),
            BuiltInFunctionCall = new Variable("<BuiltInFunctionCall>"),
            FunctionCallTail = new Variable("<FunctionCallTail>"),
            Parameter = new Variable("<Parameter>"),
            ParameterTail = new Variable("<ParameterTail>"),
            FunctionDefinition = new Variable("<FunctionDefinition>"),
            FunctionDefinitionEnd = new Variable("<FunctionDefinitionEnd>"),
            Argument = new Variable("<Argument>"),
            ArgumentTail = new Variable("<ArgumentTail>");

    // Hardcoded terminals
    private static final Terminal EPSILON_VALUE = Epsilon.getInstance(),
            IDENTIFIER = new Terminal("IDENTIFIER"),
            TYPE_DEFINITION = new Terminal("TYPE_DEFINITION"),
            CONST = new Terminal("CONST"),
            END = new Terminal("END"),
            ASSIGNATION = new Terminal("ASSIGNATION"),
            END_OF_INSTRUCTION = new Terminal("END_OF_INSTRUCTION"),
            BOOLEAN_TYPE = new Terminal("BOOLEAN_TYPE"),
            REAL_TYPE = new Terminal("REAL_TYPE"),
            INTEGER_TYPE = new Terminal("INTEGER_TYPE"),
            WHILE = new Terminal("WHILE"),
            FOR = new Terminal("FOR"),
            TERNARY_ELSE = new Terminal("TERNARY_ELSE"),
            COMMA = new Terminal("COMMA"),
            TERNARY_IF = new Terminal("TERNARY_IF"),
            INTEGER = new Terminal("INTEGER"),
            REAL = new Terminal("REAL"),
            BOOLEAN = new Terminal("BOOLEAN"),
            NEGATION = new Terminal("NEGATION"),
            BITWISE_NOT = new Terminal("BITWISE_NOT"),
            MINUS = new Terminal("MINUS"),
            PLUS = new Terminal("PLUS"),
            LEFT_PARENTHESIS = new Terminal("LEFT_PARENTHESIS"),
            RIGHT_PARENTHESIS = new Terminal("RIGHT_PARENTHESIS"),
            LAZY_OR = new Terminal("LAZY_OR"),
            LAZY_AND = new Terminal("LAZY_AND"),
            GREATER_THAN = new Terminal("GREATER_THAN"),
            LESS_THAN = new Terminal("LESS_THAN"),
            GREATER_OR_EQUALS_THAN = new Terminal("GREATER_OR_EQUALS_THAN"),
            LESS_OR_EQUALS_THAN = new Terminal("LESS_OR_EQUALS_THAN"),
            EQUALITY = new Terminal("EQUALITY"),
            INEQUALITY = new Terminal("INEQUALITY"),
            BITWISE_OR = new Terminal("BITWISE_OR"),
            BITWISE_XOR = new Terminal("BITWISE_XOR"),
            ARITHMETIC_SHIFT_LEFT = new Terminal("ARITHMETIC_SHIFT_LEFT"),
            ARITHMETIC_SHIFT_RIGHT = new Terminal("ARITHMETIC_SHIFT_RIGHT"),
            TIMES = new Terminal("TIMES"),
            DIVIDE = new Terminal("DIVIDE"),
            REMAINDER = new Terminal("REMAINDER"),
            BITWISE_AND = new Terminal("BITWISE_AND"),
            INVERSE_DIVIDE = new Terminal("INVERSE_DIVIDE"),
            POWER = new Terminal("POWER"),
            IF = new Terminal("IF"),
            ELSE_IF = new Terminal("ELSE_IF"),
            ELSE = new Terminal("ELSE"),
            LET = new Terminal("LET"),
            READ_REAL = new Terminal("READ_REAL"),
            READ_INTEGER = new Terminal("READ_INTEGER"),
            INTEGER_CAST = new Terminal("INTEGER_CAST"),
            REAL_CAST = new Terminal("REAL_CAST"),
            BOOLEAN_CAST = new Terminal("BOOLEAN_CAST"),
            PRINTLN = new Terminal("PRINTLN"),
            FUNCTION = new Terminal("FUNCTION"),
            RETURN = new Terminal("RETURN");
    
    // Hardcoded production rules
    private static final ProductionRule[] productionRules
            = new ProductionRule[] 
            {new ProductionRule(1, Program, InstructionList),
                new ProductionRule(2, Instruction, IdentifierInstruction),
                new ProductionRule(3, Instruction, ConstDefinition),
                new ProductionRule(4, Instruction, Block),
                new ProductionRule(5, Instruction, Loop),
                new ProductionRule(6, Instruction, BuiltInFunctionCall),
                new ProductionRule(7, Instruction, FunctionDefinition),
                new ProductionRule(8, InstructionList, Instruction, InstructionListTail),
                new ProductionRule(9, InstructionList, InstructionListTail),
                new ProductionRule(10, InstructionListTail, END_OF_INSTRUCTION, InstructionList),
                new ProductionRule(11, InstructionListTail, EPSILON_VALUE),
                new ProductionRule(12, IdentifierInstruction, IDENTIFIER, IdentifierInstructionTail),
                new ProductionRule(13, IdentifierInstructionTail, AssignationTail),
                new ProductionRule(14, IdentifierInstructionTail, TYPE_DEFINITION, Type),
                new ProductionRule(15, IdentifierInstructionTail, FunctionCallTail),
                new ProductionRule(16, AssignationTail, ASSIGNATION, Expression),
                new ProductionRule(17, AssignationTail, COMMA, IDENTIFIER, AssignationTail, COMMA, Expression),
                new ProductionRule(18, ConstDefinition, CONST, IDENTIFIER, AssignationTail),
                new ProductionRule(19, Block, LET, IDENTIFIER, AssignationTail, END_OF_INSTRUCTION, InstructionList, END),
                new ProductionRule(20, Loop, If),
                new ProductionRule(21, Loop, WHILE, Expression, END_OF_INSTRUCTION, InstructionList, END),
                new ProductionRule(22, Loop, FOR, IDENTIFIER, ASSIGNATION, Expression, TERNARY_ELSE, Expression, ForTail),
                new ProductionRule(23, ForTail, END_OF_INSTRUCTION, InstructionList, END),
                new ProductionRule(24, ForTail, TERNARY_ELSE, Expression, END_OF_INSTRUCTION, InstructionList, END),
                new ProductionRule(25, Type, BOOLEAN_TYPE),
                new ProductionRule(26, Type, REAL_TYPE),
                new ProductionRule(27, Type, INTEGER_TYPE),
                new ProductionRule(28, Expression, BinaryExpression, TernaryIfExpression),
                new ProductionRule(29, TernaryIfExpression, TERNARY_IF, Expression, TernaryElseExpression),
                new ProductionRule(30, TernaryIfExpression, EPSILON_VALUE),
                new ProductionRule(31, TernaryElseExpression, TERNARY_ELSE, Expression),
                new ProductionRule(32, AtomicExpression, AtomicIdentifierExpression),
                new ProductionRule(33, AtomicExpression, INTEGER),
                new ProductionRule(34, AtomicExpression, REAL),
                new ProductionRule(35, AtomicExpression, BOOLEAN),
                new ProductionRule(36, AtomicExpression, BuiltInFunctionCall),
                new ProductionRule(37, AtomicIdentifierExpression, IDENTIFIER, AtomicIdentifierExpressionTail),
                new ProductionRule(38, AtomicIdentifierExpressionTail, FunctionCallTail),
                new ProductionRule(39, AtomicIdentifierExpressionTail, EPSILON_VALUE),
                new ProductionRule(40, UnaryExpression, NEGATION, UnaryExpression),
                new ProductionRule(41, UnaryExpression, UnaryBitwiseNotExpression),
                new ProductionRule(42, UnaryBitwiseNotExpression, BITWISE_NOT, UnaryBitwiseNotExpression),
                new ProductionRule(43, UnaryBitwiseNotExpression, UnaryMinusPlusExpression),
                new ProductionRule(44, UnaryMinusPlusExpression, MINUS, UnaryMinusPlusExpression),
                new ProductionRule(45, UnaryMinusPlusExpression, PLUS, UnaryMinusPlusExpression),
                new ProductionRule(46, UnaryMinusPlusExpression, UnaryAtomicExpression),
                new ProductionRule(47, UnaryAtomicExpression, AtomicExpression),
                new ProductionRule(48, UnaryAtomicExpression, LEFT_PARENTHESIS, Expression, RIGHT_PARENTHESIS),
                new ProductionRule(49, BinaryExpression, BinaryLazyOrExpression, BinaryExpressionPrim),
                new ProductionRule(50, BinaryExpressionPrim, LAZY_OR, BinaryLazyOrExpression, BinaryExpressionPrim),
                new ProductionRule(51, BinaryExpressionPrim, EPSILON_VALUE),
                new ProductionRule(52, BinaryLazyOrExpression, BinaryLazyAndExpression, BinaryLazyOrExpressionPrim),
                new ProductionRule(53, BinaryLazyOrExpressionPrim, LAZY_AND, BinaryLazyAndExpression, BinaryLazyOrExpressionPrim),
                new ProductionRule(54, BinaryLazyOrExpressionPrim, EPSILON_VALUE),
                new ProductionRule(55, BinaryLazyAndExpression, BinaryNumericExpression, BinaryLazyAndExpressionPrim),
                new ProductionRule(56, BinaryLazyAndExpressionPrim, GREATER_THAN, BinaryNumericExpression, BinaryLazyAndExpressionPrim),
                new ProductionRule(57, BinaryLazyAndExpressionPrim, LESS_THAN, BinaryNumericExpression, BinaryLazyAndExpressionPrim),
                new ProductionRule(58, BinaryLazyAndExpressionPrim, GREATER_OR_EQUALS_THAN, BinaryNumericExpression, BinaryLazyAndExpressionPrim),
                new ProductionRule(59, BinaryLazyAndExpressionPrim, LESS_OR_EQUALS_THAN, BinaryNumericExpression, BinaryLazyAndExpressionPrim),
                new ProductionRule(60, BinaryLazyAndExpressionPrim, EQUALITY, BinaryNumericExpression, BinaryLazyAndExpressionPrim),
                new ProductionRule(61, BinaryLazyAndExpressionPrim, INEQUALITY, BinaryNumericExpression, BinaryLazyAndExpressionPrim),
                new ProductionRule(62, BinaryLazyAndExpressionPrim, EPSILON_VALUE),
                new ProductionRule(63, BinaryNumericExpression, BinaryTermExpression, BinaryNumericExpressionPrim),
                new ProductionRule(64, BinaryNumericExpressionPrim, PLUS, BinaryTermExpression, BinaryNumericExpressionPrim),
                new ProductionRule(65, BinaryNumericExpressionPrim, MINUS, BinaryTermExpression, BinaryNumericExpressionPrim),
                new ProductionRule(66, BinaryNumericExpressionPrim, BITWISE_OR, BinaryTermExpression, BinaryNumericExpressionPrim),
                new ProductionRule(67, BinaryNumericExpressionPrim, BITWISE_XOR, BinaryTermExpression, BinaryNumericExpressionPrim),
                new ProductionRule(68, BinaryNumericExpressionPrim, EPSILON_VALUE),
                new ProductionRule(69, BinaryTermExpression, BinaryShiftedExpression, BinaryTermExpressionPrim),
                new ProductionRule(70, BinaryTermExpressionPrim, ARITHMETIC_SHIFT_LEFT, BinaryShiftedExpression, BinaryTermExpressionPrim),
                new ProductionRule(71, BinaryTermExpressionPrim, ARITHMETIC_SHIFT_RIGHT, BinaryShiftedExpression, BinaryTermExpressionPrim),
                new ProductionRule(72, BinaryTermExpressionPrim, EPSILON_VALUE),
                new ProductionRule(73, BinaryShiftedExpression, BinaryFactorExpression, BinaryShiftedExpressionPrim),
                new ProductionRule(74, BinaryShiftedExpressionPrim, TIMES, BinaryFactorExpression, BinaryShiftedExpressionPrim),
                new ProductionRule(75, BinaryShiftedExpressionPrim, DIVIDE, BinaryFactorExpression, BinaryShiftedExpressionPrim),
                new ProductionRule(76, BinaryShiftedExpressionPrim, REMAINDER, BinaryFactorExpression, BinaryShiftedExpressionPrim),
                new ProductionRule(77, BinaryShiftedExpressionPrim, BITWISE_AND, BinaryFactorExpression, BinaryShiftedExpressionPrim),
                new ProductionRule(78, BinaryShiftedExpressionPrim, INVERSE_DIVIDE, BinaryFactorExpression, BinaryShiftedExpressionPrim),
                new ProductionRule(79, BinaryShiftedExpressionPrim, EPSILON_VALUE),
                new ProductionRule(80, BinaryFactorExpression, UnaryExpression, BinaryFactorExpressionPrim),
                new ProductionRule(81, BinaryFactorExpressionPrim, POWER, UnaryExpression, BinaryFactorExpressionPrim),
                new ProductionRule(82, BinaryFactorExpressionPrim, EPSILON_VALUE),
                new ProductionRule(83, If, IF, Expression, END_OF_INSTRUCTION, InstructionList, IfEnd),
                new ProductionRule(84, IfEnd, ELSE_IF, Expression, END_OF_INSTRUCTION, InstructionList, IfEnd),
                new ProductionRule(85, IfEnd, ELSE, InstructionList, END),
                new ProductionRule(86, IfEnd, END),
                new ProductionRule(87, BuiltInFunctionCall, READ_REAL, LEFT_PARENTHESIS, RIGHT_PARENTHESIS),
                new ProductionRule(88, BuiltInFunctionCall, READ_INTEGER, LEFT_PARENTHESIS, RIGHT_PARENTHESIS),
                new ProductionRule(89, BuiltInFunctionCall, INTEGER_CAST, LEFT_PARENTHESIS, Expression, RIGHT_PARENTHESIS),
                new ProductionRule(90, BuiltInFunctionCall, REAL_CAST, LEFT_PARENTHESIS, Expression, RIGHT_PARENTHESIS),
                new ProductionRule(91, BuiltInFunctionCall, BOOLEAN_CAST, LEFT_PARENTHESIS, Expression, RIGHT_PARENTHESIS),
                new ProductionRule(92, BuiltInFunctionCall, PRINTLN, LEFT_PARENTHESIS, Expression, RIGHT_PARENTHESIS),
                new ProductionRule(93, FunctionCallTail, LEFT_PARENTHESIS, Parameter, RIGHT_PARENTHESIS),
                new ProductionRule(94, Parameter, Expression, ParameterTail),
                new ProductionRule(95, Parameter, EPSILON_VALUE),
                new ProductionRule(96, ParameterTail, COMMA, Expression, ParameterTail),
                new ProductionRule(97, ParameterTail, EPSILON_VALUE),
                new ProductionRule(98, FunctionDefinition, FUNCTION, IDENTIFIER, LEFT_PARENTHESIS, Argument, RIGHT_PARENTHESIS, InstructionList, FunctionDefinitionEnd),
                new ProductionRule(99, FunctionDefinitionEnd, RETURN, Expression, END),
                new ProductionRule(100, FunctionDefinitionEnd, END),
                new ProductionRule(101, Argument, IDENTIFIER, TYPE_DEFINITION, Type, ArgumentTail),
                new ProductionRule(102, Argument, EPSILON_VALUE),
                new ProductionRule(103, ArgumentTail, COMMA, IDENTIFIER, TYPE_DEFINITION, Type, ArgumentTail),
                new ProductionRule(104, ArgumentTail, EPSILON_VALUE)
            };
    public static ActionTable createActionTable() throws Exception {
        ActionTable actionTable = new ActionTable(productionRules);
        return actionTable;
    }
}
